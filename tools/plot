#!/usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np
import scipy
import time
import math

FILENAME = "stats.log"
MEMLOG = "../memory.log"
loop = True
diff = False

if loop:
    plt.ion()
    plt.show()

def smooth(x,window_len=100,window='hanning'):
    if window_len<3:
        return x
    s=np.r_[2*x[0]-x[window_len-1::-1],x,2*x[-1]-x[-1:-window_len:-1]]
    if window == 'flat': #moving average
        w=np.ones(window_len,'d')
    else:
        w=eval('np.'+window+'(window_len)')
    y=np.convolve(w/w.sum(),s,mode='same')
    return y[window_len:-window_len+1]

while True:
    RSS = []
    LUAMEM = []

    with open(FILENAME) as f:
        lines = f.readlines()
        skipped = False
        for line in lines:
            if skipped:
                elements = line.split()
                RSS.append(float(elements[7]))
            skipped = True

    with open(MEMLOG) as f:
        lines = f.readlines()
        for line in lines:
            LUAMEM.append(float(line))
    if diff:
        DIFF = np.diff(RSS)
        DIFF = DIFF[500:-1]
        DIFF = smooth(DIFF)
        DIFF = DIFF[0:-4]

    num_plots = 2
    if diff:
        num_plots = 3

    plt.subplot(num_plots, 1, 1)
    plt.plot(RSS, label="RSS memory consumption [KiB]")
    plt.ylabel("Memory consumption [KiB]")
    plt.xlabel("Time [s]")
    plt.legend(loc=4)

    plt.subplot(num_plots, 1, 2)
    plt.plot(LUAMEM, label="LuaJIT memory consumption [KiB]")
    plt.ylabel("Memory consumption [KiB]")
    plt.xlabel("Game re-runs")
    plt.legend(loc=4)

    if diff:
        plt.subplot(num_plots, 1, 3)
        plt.plot(DIFF, label="Smoothed RSS differential [KiB/s]")
        plt.ylabel("Memory diff [KiB/s]")
        plt.xlabel("Time [s]")
        plt.legend(loc=1)


    plt.draw()
    plt.pause(1)
    plt.clf()
    if not loop:
        break
